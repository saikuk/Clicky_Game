{"version":3,"sources":["components/Card/index.js","components/Navbar/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this","this","react_default","a","createElement","className","onClick","props","handleClick","id","alt","name","src","image","Component","Navbar","href","title","oops","currentScore","topScore","Wrapper","children","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","shuffledCards","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","toConsumableArray","state","cards","chosenCard","find","element","clicked","forEach","card","setState","newcurrentScore","newTopScore","origCards","_this2","components_Navbar","components_Wrapper","map","components_Card","assign","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ca50db8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Card extends Component {\n  render() {\n    return (\n          <div className=\"card\" onClick={() => this.props.handleClick(this.props.id)}>\n          <div className=\"img-container\">\n            <img alt={this.props.name} src={this.props.image} />\n          </div>\n          <div className=\"card-body text-center\">\n            <ul>\n              <li>\n                <strong>Name:</strong> {this.props.name}\n              </li>\n            </ul>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav>\n        <ul>\n          <li className=\"brand\">\n            <a href=\"/\">{this.props.title}</a>\n          </li>\n\n          <li className=\"oops\">{this.props.oops}</li>\n\n          <li>Current Score: {this.props.currentScore}</li>\n\n          <li>Top Score: {this.props.topScore}</li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport origCards from \"./cards.json\";\n\nfunction shuffleArray(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: origCards,\n      topScore: 0,\n      currentScore: 0,\n      oops: \"\"\n    };\n  }\n\n  handleClick = id => {\n\n    let shuffledCards = shuffleArray([...this.state.cards]);\n    let chosenCard = shuffledCards.find(element => element.id === id);\n\n    if (!chosenCard.clicked) {\n      chosenCard.clicked = true;\n      let newcurrentScore = this.state.currentScore + 1;\n      let newTopScore =\n        newcurrentScore > this.state.topScore ? newcurrentScore : this.state.topScore;\n      this.setState({\n        cards: shuffledCards,\n        currentScore: newcurrentScore,\n        topScore: newTopScore,\n        oops: \"\"\n      });\n    } else {\n    \n      shuffledCards.forEach(card => {\n        card.clicked = false;\n      });\n      this.setState({\n        cards: shuffledCards,\n        currentScore: 0,\n        oops: \"Oops! Try again.\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Navbar\n          title=\"Clicky Game\"\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Wrapper className=\"card-columns\">\n          {this.state.cards.map(element => {\n            return (\n              <Card\n                {...element}\n                key={element.id}\n                handleClick={this.handleClick}\n              />\n            );\n          })}\n        </Wrapper>\n        <footer className=\"text-center\">\n          Click on each box only once!\n          <h3>{this.state.oops}</h3>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}